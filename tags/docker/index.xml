<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on W1ndy&#39;s Blog</title>
    <link>https://w1ndyz.github.io/tags/docker/</link>
    <description>Recent content in docker on W1ndy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 24 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://w1ndyz.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用DockerSwarm部署Rails(三)</title>
      <link>https://w1ndyz.github.io/post/rails-swarm-deploy3/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://w1ndyz.github.io/post/rails-swarm-deploy3/</guid>
      <description>Portainer 在使用Docker swarm部署项目时，我们先要了解一个工具&amp;ndash;Portainer。 Portainer是一个轻量级的管理Dock</description>
    </item>
    
    <item>
      <title>使用DockerSwarm部署Rails(二)</title>
      <link>https://w1ndyz.github.io/post/rails-swarm-deploy2/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://w1ndyz.github.io/post/rails-swarm-deploy2/</guid>
      <description>多阶段构建 在构建镜像的时候，我们会发现: rails的应用体积很大 构建时间过长 于是多阶段构建出现了，它将一个镜像的构建分为多个阶段。比如rai</description>
    </item>
    
    <item>
      <title>使用DockerSwarm部署Rails(一)</title>
      <link>https://w1ndyz.github.io/post/rails-swarm-deploy1/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://w1ndyz.github.io/post/rails-swarm-deploy1/</guid>
      <description>在使用docker部署rails项目之前，我们先来介绍gitlab的ci/cd。 Gitlab提供了持续集成(CI Continuous Integration )的服务。在项目中添加.</description>
    </item>
    
  </channel>
</rss>
